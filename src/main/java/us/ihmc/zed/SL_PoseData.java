// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing positional tracking data giving the position and orientation of the camera in 3D space.
<p>
Different representations of position and orientation can be retrieved, along with timestamp and pose confidence.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_PoseData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_PoseData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_PoseData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_PoseData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_PoseData position(long position) {
        return (SL_PoseData)super.position(position);
    }
    @Override public SL_PoseData getPointer(long i) {
        return new SL_PoseData((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Whether the tracking is activated or not.
	\note You should check that first if something is wrong.
     */
	public native @Cast("bool") boolean valid(); public native SL_PoseData valid(boolean setter);
	/**
	\brief Timestamp of the \ref SL_PoseData.
	
	This timestamp should be compared with the camera timestamp for synchronization.
	*/
	public native @Cast("unsigned long long") long timestamp(); public native SL_PoseData timestamp(long setter);
	/** \brief Quaternion/orientation component of the \ref SL_PoseData.*/
	public native @ByRef SL_Quaternion rotation(); public native SL_PoseData rotation(SL_Quaternion setter);
	/** \brief Translation component of the \ref SL_PoseData.*/
	public native @ByRef SL_Vector3 translation(); public native SL_PoseData translation(SL_Vector3 setter);
	/**
	\brief Confidence/quality of the pose estimation for the target frame.
	<p>
	A confidence metric of the tracking [0-100] with:
	- 0: tracking is lost
	- 100: tracking can be fully trusted
     */
	public native int pose_confidence(); public native SL_PoseData pose_confidence(int setter);
	/** \brief 6x6 pose covariance matrix of translation (the first 3 values) and rotation in so3 (the last 3 values).*/
	public native float pose_covariance(int i); public native SL_PoseData pose_covariance(int i, float setter);
	@MemberGetter public native FloatPointer pose_covariance();
	/**
	\brief Twist of the camera available in reference camera.
	<p>
	This expresses velocity in free space, broken into its linear and angular parts.
     */
	public native float twist(int i); public native SL_PoseData twist(int i, float setter);
	@MemberGetter public native FloatPointer twist();
	/**
	\brief Row-major representation of the 6x6 twist covariance matrix of the camera.
	<p>
	This expresses the uncertainty of the twist.
     */
	public native float twist_covariance(int i); public native SL_PoseData twist_covariance(int i, float setter);
	@MemberGetter public native FloatPointer twist_covariance();
}
