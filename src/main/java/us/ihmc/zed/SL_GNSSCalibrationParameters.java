// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
 * \brief Holds the options used for calibrating GNSS / VIO.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_GNSSCalibrationParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_GNSSCalibrationParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_GNSSCalibrationParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_GNSSCalibrationParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_GNSSCalibrationParameters position(long position) {
        return (SL_GNSSCalibrationParameters)super.position(position);
    }
    @Override public SL_GNSSCalibrationParameters getPointer(long i) {
        return new SL_GNSSCalibrationParameters((Pointer)this).offsetAddress(i);
    }

	/**
	 * \brief This parameter defines the target yaw uncertainty at which the calibration process between GNSS and VIO concludes.
	 * The unit of this parameter is in radian.
	 * 
	 * Default: 0.1 radians
	 */
	public native float target_yaw_uncertainty(); public native SL_GNSSCalibrationParameters target_yaw_uncertainty(float setter);
	/**
	 * \brief When this parameter is enabled (set to true), the calibration process between GNSS and VIO accounts for the uncertainty in the determined translation, thereby facilitating the calibration termination.
	 * The maximum allowable uncertainty is controlled by the 'target_translation_uncertainty' parameter.
	 * 
	 * Default: false
	 */
	public native @Cast("bool") boolean enable_translation_uncertainty_target(); public native SL_GNSSCalibrationParameters enable_translation_uncertainty_target(boolean setter);
	/**
	 * \brief This parameter defines the target translation uncertainty at which the calibration process between GNSS and VIO concludes.
	 * 
	 * Default: 10e-2 (10 centimeters)
	 */
	public native float target_translation_uncertainty(); public native SL_GNSSCalibrationParameters target_translation_uncertainty(float setter);
	/**
	 * \brief This parameter determines whether reinitialization should be performed between GNSS and VIO fusion when a significant disparity is detected between GNSS data and the current fusion data.
	 * It becomes particularly crucial during prolonged GNSS signal loss scenarios.
	 * 
	 * Default: true
	 */
	public native @Cast("bool") boolean enable_reinitialization(); public native SL_GNSSCalibrationParameters enable_reinitialization(boolean setter);
	/**
	 * \brief This parameter determines the threshold for GNSS/VIO reinitialization.
	 * If the fused position deviates beyond out of the region defined by the product of the GNSS covariance and the gnss_vio_reinit_threshold, a reinitialization will be triggered.
	 * 
	 * Default: 5
	 */
	public native float gnss_vio_reinit_threshold(); public native SL_GNSSCalibrationParameters gnss_vio_reinit_threshold(float setter);
	/**
	 * \brief If this parameter is set to true, the fusion algorithm will used a rough VIO / GNSS calibration at first and then refine it.
	 * This allow you to quickly get a fused position.
	 * 
	 * Default: true
	 */
	public native @Cast("bool") boolean enable_rolling_calibration(); public native SL_GNSSCalibrationParameters enable_rolling_calibration(boolean setter);
	/**
	 \ brief Define a transform between the GNSS antenna and the camera system for the VIO / GNSS calibration.
	 * Default value is [0,0,0], this position can be refined by the calibration if enabled
	 */
	public native @ByRef SL_Vector3 gnss_antenna_position(); public native SL_GNSSCalibrationParameters gnss_antenna_position(SL_Vector3 setter);
}
