// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure representing a plane defined by a point and a normal, or a plane equation.
<p>
\note The plane measurements are expressed in reference defined by SL_RuntimeParameters.reference_frame.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_PlaneData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_PlaneData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_PlaneData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_PlaneData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_PlaneData position(long position) {
        return (SL_PlaneData)super.position(position);
    }
    @Override public SL_PlaneData getPointer(long i) {
        return new SL_PlaneData((Pointer)this).offsetAddress(i);
    }

	/** \brief \ref SL_ERROR_CODE returned by the ZED SDK when the plane detection was attempted.*/
	public native int error_code(); public native SL_PlaneData error_code(int setter);
	/**
	\brief Type of the plane defined by its orientation.
	\note It is deduced from the gravity vector and is therefore not available with on \ref SL_MODEL_ZED.
	*/
	public native @Cast("UNITY_PLAN_TYPE") int type(); public native SL_PlaneData type(int setter);
	/** \brief Plane normalized normal vector.*/
	public native @ByRef SL_Vector3 plane_normal(); public native SL_PlaneData plane_normal(SL_Vector3 setter);
	/** \brief Plane center point.*/
	public native @ByRef SL_Vector3 plane_center(); public native SL_PlaneData plane_center(SL_Vector3 setter);
	/** \brief Plane position relative to the global reference frame.*/
	public native @ByRef SL_Vector3 plane_transform_position(); public native SL_PlaneData plane_transform_position(SL_Vector3 setter);
	/** \brief Plane orientation relative to the global reference frame.*/
	public native @ByRef SL_Quaternion plane_transform_orientation(); public native SL_PlaneData plane_transform_orientation(SL_Quaternion setter);
	/**
	\brief Plane equation coefficients <pre>{@code {a, b, c, d}}</pre>.
	\note The plane equation has the following form: <pre>{@code ax + by + cz = d}</pre>.
	*/
	public native @ByRef SL_Vector4 plane_equation(); public native SL_PlaneData plane_equation(SL_Vector4 setter);
	/** \brief Width and height of the bounding rectangle around the plane contours.*/
	public native @ByRef SL_Vector2 extents(); public native SL_PlaneData extents(SL_Vector2 setter);
	/** \brief Size of \ref bounds.*/
	public native int bounds_size(); public native SL_PlaneData bounds_size(int setter);
	/**
	\brief Array of 3D points forming a polygon bounds corresponding to the current visible limits of the plane.
	*/
	public native @ByRef SL_Vector3 bounds(int i); public native SL_PlaneData bounds(int i, SL_Vector3 setter);
	@MemberGetter public native SL_Vector3 bounds(); //max 256 points but only BoundsSize are actually filled
}
