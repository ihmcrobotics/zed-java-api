// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
* \brief Structure containing data from the temperature sensors.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_TemperatureData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_TemperatureData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_TemperatureData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_TemperatureData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_TemperatureData position(long position) {
        return (SL_TemperatureData)super.position(position);
    }
    @Override public SL_TemperatureData getPointer(long i) {
        return new SL_TemperatureData((Pointer)this).offsetAddress(i);
    }

	/** \brief Temperature in 째C at the IMU location (-100 if not available).*/
	public native float imu_temp(); public native SL_TemperatureData imu_temp(float setter);
	/** \brief Temperature in 째C at the barometer location (-100 if not available).*/
	public native float barometer_temp(); public native SL_TemperatureData barometer_temp(float setter);
	/** \brief Temperature in 째C next to the left image sensor (-100 if not available).*/
	public native float onboard_left_temp(); public native SL_TemperatureData onboard_left_temp(float setter);
	/** \brief Temperature in 째C next to the right image sensor (-100 if not available).*/
	public native float onboard_right_temp(); public native SL_TemperatureData onboard_right_temp(float setter);
}
