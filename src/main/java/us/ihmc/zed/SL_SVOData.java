// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief  Structure containing data that can be stored in and retrieved from SVOs.
*		That information will be ingested with sl_ingest_data_into_svo and retrieved with sl_retrieve_svo_data
 */
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_SVOData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_SVOData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_SVOData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_SVOData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_SVOData position(long position) {
        return (SL_SVOData)super.position(position);
    }
    @Override public SL_SVOData getPointer(long i) {
        return new SL_SVOData((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Key used to retrieve the data stored into SVOData's content.
	 */
	public native @Cast("char*") BytePointer key(); public native SL_SVOData key(BytePointer setter);
	/**
	\brief Size of the key
	 */
	public native int key_size(); public native SL_SVOData key_size(int setter);
	/**
	\brief content stored as SVOData.
	* Allow any type of content, including raw data like compressed images or JSON.
	 */
	public native @Cast("char*") BytePointer content(); public native SL_SVOData content(BytePointer setter);
	/**
	\brief Size of the content.
	 */
	public native int content_size(); public native SL_SVOData content_size(int setter);
	/**
	\brief Timestamp of the data.
	 */
	public native @Cast("uint64_t") long timestamp_ns(); public native SL_SVOData timestamp_ns(long setter);
}
