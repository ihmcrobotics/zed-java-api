// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing parameters that defines the behavior of sl_grab().
<p>
The default constructor sets all parameters to their default settings.
\note Parameters can be adjusted by the user.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_RuntimeParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_RuntimeParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_RuntimeParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_RuntimeParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_RuntimeParameters position(long position) {
        return (SL_RuntimeParameters)super.position(position);
    }
    @Override public SL_RuntimeParameters getPointer(long i) {
        return new SL_RuntimeParameters((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Reference frame in which to provides the 3D measures (point cloud, normals, etc.).
	
	Default: \ref SL_REFERENCE_FRAME_CAMERA
	 */
	public native @Cast("SL_REFERENCE_FRAME") int reference_frame(); public native SL_RuntimeParameters reference_frame(int setter);

	/**
	\brief Defines if the depth map should be computed.
        
	Default: true
	\note If set to false, only the images are available.
	 */
	public native @Cast("bool") boolean enable_depth(); public native SL_RuntimeParameters enable_depth(boolean setter);
        
	/**
	\brief Defines if the depth map should be completed or not.
	<p>
	Default: false
	\note It is similar to the removed sl_SENSING_MODE_FILL.
	\warning Enabling this will override the confidence values \ref confidence_threshold
	and \ref texture_confidence_threshold as well as \ref remove_saturated_areas.
	 */
	public native @Cast("bool") boolean enable_fill_mode(); public native SL_RuntimeParameters enable_fill_mode(boolean setter);
        
	/**
	\brief Threshold to reject depth values based on their confidence.
	<p>
	Each depth pixel has a corresponding confidence (\ref SL_MEASURE_CONFIDENCE) in the range [1, 100].
	\n Decreasing this value will remove depth data from both objects edges and low textured areas, to keep only confident depth estimation data.
	\n Default: 95
	\note Pixels with a value close to 100 are not to be trusted. Accurate depth pixels tends to be closer to lower values.
	\note It can be seen as a probability of error, scaled to 100.
	 */
	public native int confidence_threshold(); public native SL_RuntimeParameters confidence_threshold(int setter);
	
	/**
	\brief Threshold to reject depth values based on their texture confidence.
	<p>
	The texture confidence range is [1, 100].
	\n Decreasing this value will remove depth data from image areas which are uniform.
	\n Default: 100 (no depth pixel will be rejected)
	\note Pixels with a value close to 100 are not to be trusted. Accurate depth pixels tends to be closer to lower values.
	 */
	public native int texture_confidence_threshold(); public native SL_RuntimeParameters texture_confidence_threshold(int setter);

	/**
	\brief Defines if the saturated area (luminance>=255) must be removed from depth map estimation.
	<p>
	Default: true
	\note It is recommended to keep this parameter at true because saturated area can create false detection.
	 */
	public native @Cast("bool") boolean remove_saturated_areas(); public native SL_RuntimeParameters remove_saturated_areas(boolean setter);
}
