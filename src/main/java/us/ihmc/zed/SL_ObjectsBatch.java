// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing batched data of a detected objects from the object detection module.
<p>
This structure can be used to store trajectories.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_ObjectsBatch extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_ObjectsBatch() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_ObjectsBatch(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_ObjectsBatch(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_ObjectsBatch position(long position) {
        return (SL_ObjectsBatch)super.position(position);
    }
    @Override public SL_ObjectsBatch getPointer(long i) {
        return new SL_ObjectsBatch((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Number of objects in the \ref SL_ObjectsBatch.
	
	Use this to iterate through the top of \ref positions / \ref velocities / \ref bounding_boxes / etc.
	\note Objects with greater indexes are empty.
	*/
	public native int nb_data(); public native SL_ObjectsBatch nb_data(int setter);
	/** \brief Id of the batch.*/
	public native int id(); public native SL_ObjectsBatch id(int setter);
	/** \brief Objects class/category to identify the object type.*/
	public native @Cast("SL_OBJECT_CLASS") int label(); public native SL_ObjectsBatch label(int setter);
	/** \brief Objects sub-class/sub-category to identify the object type.*/
	public native @Cast("SL_OBJECT_SUBCLASS") int sublabel(); public native SL_ObjectsBatch sublabel(int setter);
	/** \brief Objects tracking state.*/
	public native @Cast("SL_OBJECT_TRACKING_STATE") int tracking_state(); public native SL_ObjectsBatch tracking_state(int setter);
	/** \brief Array of positions for each object.*/
	public native @ByRef SL_Vector3 positions(int i); public native SL_ObjectsBatch positions(int i, SL_Vector3 setter);
	@MemberGetter public native SL_Vector3 positions();
	/** \brief Array of positions' covariances for each object. */
	public native float position_covariances(int i, int j); public native SL_ObjectsBatch position_covariances(int i, int j, float setter);
	@MemberGetter public native @Cast("float(*)[6]") FloatPointer position_covariances();
	/** \brief Array of 3D velocities for each object.*/
	public native @ByRef SL_Vector3 velocities(int i); public native SL_ObjectsBatch velocities(int i, SL_Vector3 setter);
	@MemberGetter public native SL_Vector3 velocities();
	/** \brief Array of timestamps for each object.*/
	public native @Cast("uint64_t") long timestamps(int i); public native SL_ObjectsBatch timestamps(int i, long setter);
	@MemberGetter public native @Cast("uint64_t*") LongPointer timestamps();
	
	/**
	\brief Array of 2D bounding boxes for each object.
	\note Expressed in pixels on the original image resolution, <pre>{@code [0, 0]}</pre> is the top left corner.
	<pre>{@code
	A ------ B
	| Object |
	D ------ C
	}</pre>
	*/
	public native @ByRef SL_Vector2 bounding_boxes_2d(int i, int j); public native SL_ObjectsBatch bounding_boxes_2d(int i, int j, SL_Vector2 setter);
	@MemberGetter public native @Cast("SL_Vector2(*)[4]") SL_Vector2 bounding_boxes_2d();
	/**
	\brief Array of 3D bounding boxes for each object.
	\note They are defined in SL_InitParameters.coordinate_unit and expressed in SL_RuntimeParameters.reference_frame.
	<pre>{@code
       1 ------ 2
      /        /|
     0 ------ 3 |
     | Object | 6
     |        |/
     4 ------ 7
	}</pre>
	*/
	public native @ByRef SL_Vector3 bounding_boxes(int i, int j); public native SL_ObjectsBatch bounding_boxes(int i, int j, SL_Vector3 setter);
	@MemberGetter public native @Cast("SL_Vector3(*)[8]") SL_Vector3 bounding_boxes();

	/** \brief Array of confidences for each object.*/
	public native float confidences(int i); public native SL_ObjectsBatch confidences(int i, float setter);
	@MemberGetter public native FloatPointer confidences();
	/** \brief Array of action states for each object.*/
	public native @Cast("SL_OBJECT_ACTION_STATE") int action_states(int i); public native SL_ObjectsBatch action_states(int i, int setter);
	@MemberGetter public native @Cast("SL_OBJECT_ACTION_STATE*") IntPointer action_states();

	/**
	\brief Array of 2D bounding box of the head for each object (person).
	\note Expressed in pixels on the original image resolution, <pre>{@code [0, 0]}</pre> is the top left corner.
	\warning Not available with [SL_OBJECT_DETECTION_MODEL_MULTI_CLASS_BOX_XXX](\ref SL_OBJECT_DETECTION_MODEL).
	 */
	public native @ByRef SL_Vector2 head_bounding_boxes_2d(int i, int j); public native SL_ObjectsBatch head_bounding_boxes_2d(int i, int j, SL_Vector2 setter);
	@MemberGetter public native @Cast("SL_Vector2(*)[4]") SL_Vector2 head_bounding_boxes_2d();
	/**
	\brief Array of 3D bounding box of the head for each object (person).
	\note They are defined in SL_InitParameters.coordinate_unit and expressed in SL_RuntimeParameters.reference_frame.
	\warning Not available with [SL_OBJECT_DETECTION_MODEL_MULTI_CLASS_BOX_XXX](\ref SL_OBJECT_DETECTION_MODEL).
	 */
	public native @ByRef SL_Vector3 head_bounding_boxes(int i, int j); public native SL_ObjectsBatch head_bounding_boxes(int i, int j, SL_Vector3 setter);
	@MemberGetter public native @Cast("SL_Vector3(*)[8]") SL_Vector3 head_bounding_boxes();
	/**        
	\brief Array of 3D centroid of the head for each object (person).
	\note They are defined in SL_InitParameters.coordinate_unit and expressed in SL_RuntimeParameters.reference_frame.
	\warning Not available with [SL_OBJECT_DETECTION_MODEL_MULTI_CLASS_BOX_XXX](\ref SL_OBJECT_DETECTION_MODEL).
	 */
	public native @ByRef SL_Vector3 head_positions(int i); public native SL_ObjectsBatch head_positions(int i, SL_Vector3 setter);
	@MemberGetter public native SL_Vector3 head_positions();
}
