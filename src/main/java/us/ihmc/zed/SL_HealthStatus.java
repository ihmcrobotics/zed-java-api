// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;



/*
\brief Structure containing the self diagnostic results of the image/depth

That information can be retrieved by get_health_status(), and enabled by sl::InitParameters::enable_image_validity_check
 */
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_HealthStatus extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_HealthStatus() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_HealthStatus(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_HealthStatus(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_HealthStatus position(long position) {
        return (SL_HealthStatus)super.position(position);
    }
    @Override public SL_HealthStatus getPointer(long i) {
        return new SL_HealthStatus((Pointer)this).offsetAddress(i);
    }

	/**
	 \brief Indicates if the Health check is enabled
	 */
	public native @Cast("bool") boolean enabled(); public native SL_HealthStatus enabled(boolean setter);

	/**
	\brief This status indicates poor image quality
	 * It can indicates camera issue, like incorrect manual video settings, damaged hardware, corrupted video stream from the camera,
	 * dirt or other partial or total occlusion, stuck ISP (black/white/green/purple images, incorrect exposure, etc), blurry images
	 * It also includes widely different left and right images which leads to unavailable depth information
	 * In case of very low light this will be reported by this status and the dedicated \ref HealthStatus::low_lighting
	 *
	 * \note: Frame tearing is currently not detected. Advanced blur detection requires heavier processing and is enabled only when setting \ref Initparameters::enable_image_validity_check to 3 and above
	 */
	public native @Cast("bool") boolean low_image_quality(); public native SL_HealthStatus low_image_quality(boolean setter);

	/**
	\brief This status indicates low light scene.
	 * As the camera are passive sensors working in the visible range, they requires some external light to operate.
	 * This status warns if the lighting condition become suboptimal and worst.
	 * This is based on the scene illuminance in LUX for the ZED X cameras series (available with \ref VIDEO_SETTINGS::SCENE_ILLUMINANCE)
	 * For other camera models or when using SVO files, this is based on computer vision processing from the image characteristics.
	 */
	public native @Cast("bool") boolean low_lighting(); public native SL_HealthStatus low_lighting(boolean setter);

	/**
	\brief This status indicates low depth map reliability
	 * If the image are unreliable or if the scene condition are very challenging this status report a warning.
	 * This is using the depth confidence and general depth distribution. Typically due to obstructed eye (included very close object,
	 * strong occlusions) or degraded condition like heavy fog/water on the optics
	 */
	public native @Cast("bool") boolean low_depth_reliability(); public native SL_HealthStatus low_depth_reliability(boolean setter);

	/**
	\brief This status indicates motion sensors data reliability issue.
	 * This indicates the IMU is providing low quality data. Possible underlying can be regarding the data stream like corrupted data,
	 * timestamp inconsistency, resonance frequencies, saturated sensors / very high acceleration or rotation, shocks
	 */
	public native @Cast("bool") boolean low_motion_sensors_reliability(); public native SL_HealthStatus low_motion_sensors_reliability(boolean setter);
}
