// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing intrinsic and extrinsic parameters of the camera (translation and rotation).
<p>
That information about the camera will be returned by sl_get_camera_information().
<p>
\note The calibration/rectification process, called during sl_open_camera(), is using the raw parameters defined in the SNXXX.conf file, where XXX is the serial number of the camera.
\note Those values may be adjusted or not by the self-calibration to get a proper image alignment.
\note After sl_open_camera() is done (with or without self-calibration activated), most of the stereo parameters (except baseline of course) should be 0 or very close to 0.
\note It means that images after rectification process (given by sl_retrieve_image()) are aligned as if they were taken by a "perfect" stereo camera, defined by the new \ref SL_CalibrationParameters.
\warning CalibrationParameters are returned in \ref SL_COORDINATE_SYSTEM_IMAGE, they are not impacted by the SL_InitParameters.coordinate_system.
 */
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_CalibrationParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_CalibrationParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_CalibrationParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_CalibrationParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_CalibrationParameters position(long position) {
        return (SL_CalibrationParameters)super.position(position);
    }
    @Override public SL_CalibrationParameters getPointer(long i) {
        return new SL_CalibrationParameters((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Intrinsic \ref SL_CameraParameters of the left camera.
	*/
	public native @ByRef SL_CameraParameters left_cam(); public native SL_CalibrationParameters left_cam(SL_CameraParameters setter);
	/**
	\brief Intrinsic \ref SL_CameraParameters of the right camera.
	*/
	public native @ByRef SL_CameraParameters right_cam(); public native SL_CalibrationParameters right_cam(SL_CameraParameters setter);
	/**
	\brief Left to right camera rotation, expressed in user coordinate system and unit (defined by SL_InitParameters.coordinate_system).
	*/
	public native @ByRef SL_Vector4 rotation(); public native SL_CalibrationParameters rotation(SL_Vector4 setter);
	/**
	\brief Left to right camera translation, expressed in user coordinate system and unit (defined by SL_InitParameters.coordinate_system).
	*/
	public native @ByRef SL_Vector3 translation(); public native SL_CalibrationParameters translation(SL_Vector3 setter);
}
