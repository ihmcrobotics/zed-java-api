// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
* \brief Structure containing data from the barometer sensor.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_BarometerData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_BarometerData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_BarometerData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_BarometerData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_BarometerData position(long position) {
        return (SL_BarometerData)super.position(position);
    }
    @Override public SL_BarometerData getPointer(long i) {
        return new SL_BarometerData((Pointer)this).offsetAddress(i);
    }

	/** \brief Whether the barometer sensor is available in your camera.*/
	public native @Cast("bool") boolean is_available(); public native SL_BarometerData is_available(boolean setter);
	/** \brief Data acquisition timestamp in nanoseconds.*/
	public native @Cast("unsigned long long") long timestamp_ns(); public native SL_BarometerData timestamp_ns(long setter);
	/** \brief Ambient air pressure in hectopascal (hPa).*/
	public native float pressure(); public native SL_BarometerData pressure(float setter);
	/** \brief Relative altitude from first camera position (at \ref sl_open_camera() time).*/
	public native float relative_altitude(); public native SL_BarometerData relative_altitude(float setter);
}
