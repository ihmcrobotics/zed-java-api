// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing data of a detected object such as its \ref bounding_box, \ref label, \ref id and its 3D \ref position.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_ObjectData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_ObjectData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_ObjectData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_ObjectData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_ObjectData position(long position) {
        return (SL_ObjectData)super.position(position);
    }
    @Override public SL_ObjectData getPointer(long i) {
        return new SL_ObjectData((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Object identification number.
	<p>
	It is used as a reference when tracking the object through the frames.
	\note Only available if SL_ObjectDetectionParameters.enable_tracking is activated.
	\note Otherwise, it will be set to -1.
	 */
	public native int id(); public native SL_ObjectData id(int setter);
	/**
	\brief Unique id to help identify and track AI detections.
    <p>
    It can be either generated externally, or by using \ref sl_generate_unique_id() or left empty.
	*/
	public native @Cast("unsigned char") byte unique_object_id(int i); public native SL_ObjectData unique_object_id(int i, byte setter);
	@MemberGetter public native @Cast("unsigned char*") BytePointer unique_object_id();

	/**
	\brief Object raw label.
	<p>
	It is forwarded from \ref SL_CustomBoxObjectData when using \ref SL_OBJECT_DETECTION_MODEL_CUSTOM_BOX_OBJECTS.
	*/
	public native int raw_label(); public native SL_ObjectData raw_label(int setter);
	/**
	\brief Object class/category to identify the object type.
	 */
	public native @Cast("SL_OBJECT_CLASS") int label(); public native SL_ObjectData label(int setter);
	/**
	\brief Object sub-class/sub-category to identify the object type.
	 */
	public native @Cast("SL_OBJECT_SUBCLASS") int sublabel(); public native SL_ObjectData sublabel(int setter);
	/**
	\brief Object tracking state.
	 */
	public native @Cast("SL_OBJECT_TRACKING_STATE") int tracking_state(); public native SL_ObjectData tracking_state(int setter);
	/**
	\brief Object action state.
	 */
	public native @Cast("SL_OBJECT_ACTION_STATE") int action_state(); public native SL_ObjectData action_state(int setter);
	/**
	\brief Object 3D centroid.
	\note It is defined in SL_InitParameters.coordinate_unit and expressed in SL_RuntimeParameters.reference_frame.
	 */
	public native @ByRef @Name("position") SL_Vector3 _position(); public native SL_ObjectData _position(SL_Vector3 setter);
	/**
	\brief Detection confidence value of the object.
	
	From 0 to 100, a low value means the object might not be localized perfectly or the label (\ref SL_OBJECT_CLASS) is uncertain.
	 */
	public native float confidence(); public native SL_ObjectData confidence(float setter);

	/**
	\brief Mask defining which pixels which belong to the object (in \ref bounding_box_2d and set to 255) and those of the background (set to 0).
	\warning The mask information is only available for tracked objects (\ref SL_OBJECT_TRACKING_STATE_OK) that have a valid depth.
	\warning Otherwise, the mask will not be initialized.
	*/
	public native IntPointer mask(); public native SL_ObjectData mask(IntPointer setter);
	//int* mask; //IntPtr to an sl::Mat object.

	/**
	\brief 2D bounding box of the object represented as four 2D points starting at the top left corner and rotation clockwise.
	\note Expressed in pixels on the original image resolution, <pre>{@code [0, 0]}</pre> is the top left corner.
	<pre>{@code
	A ------ B
	| Object |
	D ------ C
	}</pre>
     */
	public native @ByRef SL_Vector2 bounding_box_2d(int i); public native SL_ObjectData bounding_box_2d(int i, SL_Vector2 setter);
	@MemberGetter public native SL_Vector2 bounding_box_2d();
	/**
	\brief 3D centroid of the head of the object (a person).
	\note It is defined in SL_InitParameters.coordinate_unit and expressed in SL_RuntimeParameters.reference_frame.
	\warning Not available with [SL_OBJECT_DETECTION_MODEL_MULTI_CLASS_BOX_XXX](\ref SL_OBJECT_DETECTION_MODEL).
	 */
	public native @ByRef SL_Vector3 head_position(); public native SL_ObjectData head_position(SL_Vector3 setter);
	/**
	\brief Defines the object 3D velocity
	\note It is defined in <pre>{@code SL_InitParameters.coordinate_unit / s}</pre> and expressed in SL_RuntimeParameters.reference_frame.
	 */
	public native @ByRef SL_Vector3 velocity(); public native SL_ObjectData velocity(SL_Vector3 setter);
	/**
	\brief 3D object dimensions: width, height, length.
	\note It is defined in SL_InitParameters.coordinate_unit and expressed in SL_RuntimeParameters.reference_frame.
	 */
	public native @ByRef SL_Vector3 dimensions(); public native SL_ObjectData dimensions(SL_Vector3 setter);
	/**
	\brief 3D bounding box of the object represented as eight 3D points.
	\note It is defined in SL_InitParameters.coordinate_unit and expressed in SL_RuntimeParameters.reference_frame.
	<pre>{@code
       1 ------ 2
      /        /|
     0 ------ 3 |
     | Object | 6
     |        |/
     4 ------ 7
    }</pre>
	 */
	public native @ByRef SL_Vector3 bounding_box(int i); public native SL_ObjectData bounding_box(int i, SL_Vector3 setter);
	@MemberGetter public native SL_Vector3 bounding_box();
	/**
	\brief 3D bounding box of the head of the object (a person) represented as eight 3D points.
	\note It is defined in SL_InitParameters.coordinate_unit and expressed in SL_RuntimeParameters.reference_frame.
	\warning Not available with [SL_OBJECT_DETECTION_MODEL_MULTI_CLASS_BOX_XXX](\ref SL_OBJECT_DETECTION_MODEL).
	 */
	public native @ByRef SL_Vector3 head_bounding_box(int i); public native SL_ObjectData head_bounding_box(int i, SL_Vector3 setter);
	@MemberGetter public native SL_Vector3 head_bounding_box();
	/**
	\brief 2D bounding box of the head of the object (a person) represented as four 2D points starting at the top left corner and rotation clockwise.
	\note Expressed in pixels on the original image resolution, <pre>{@code [0, 0]}</pre> is the top left corner.
	\warning Not available with [SL_OBJECT_DETECTION_MODEL_MULTI_CLASS_BOX_XXX](\ref SL_OBJECT_DETECTION_MODEL).
	 */
	public native @ByRef SL_Vector2 head_bounding_box_2d(int i); public native SL_ObjectData head_bounding_box_2d(int i, SL_Vector2 setter);
	@MemberGetter public native SL_Vector2 head_bounding_box_2d();
	/**
	\brief Covariance matrix of the 3D position.
	\note It is represented by its upper triangular matrix value
	<pre>{@code
			= [p0, p1, p2]
			[p1, p3, p4]
			[p2, p4, p5]
	}</pre>
	where pi is <pre>{@code position_covariance[i]}</pre>
	 */
	public native float position_covariance(int i); public native SL_ObjectData position_covariance(int i, float setter);
	@MemberGetter public native FloatPointer position_covariance();
}
