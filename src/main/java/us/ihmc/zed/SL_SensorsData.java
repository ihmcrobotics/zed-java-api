// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing all sensors data (except image sensors) to be used for positional tracking or environment study.
<p>
\note Some data are not available in SVO and streaming input mode.
\note They are specified by a note "Not available in SVO or STREAM mode." in the documentation of a specific data.
\note If nothing is mentioned in the documentation, they are available in all input modes.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_SensorsData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_SensorsData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_SensorsData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_SensorsData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_SensorsData position(long position) {
        return (SL_SensorsData)super.position(position);
    }
    @Override public SL_SensorsData getPointer(long i) {
        return new SL_SensorsData((Pointer)this).offsetAddress(i);
    }

	//IMU data
	/** \brief IMU data.*/
	public native @ByRef SL_IMUData imu(); public native SL_SensorsData imu(SL_IMUData setter);
	/** \brief Barometer data.*/
	public native @ByRef SL_BarometerData barometer(); public native SL_SensorsData barometer(SL_BarometerData setter);
	/** \brief Magnetometer data.*/
	public native @ByRef SL_MagnetometerData magnetometer(); public native SL_SensorsData magnetometer(SL_MagnetometerData setter);
	/** \brief Temperature data.*/
	public native @ByRef SL_TemperatureData temperature(); public native SL_SensorsData temperature(SL_TemperatureData setter);

	/**
	\brief Motion state of the camera.
	- static: 0
	- moving: 1
	- falling: 2
	*/
	public native int camera_moving_state(); public native SL_SensorsData camera_moving_state(int setter);

	/**
	\brief Indicates if the Sensors data has been taken during a frame capture on sensor.
	<p>
	If the value is 1, the data has been taken during the same time than a frame has been acquired by the left sensor (the time precision is linked to the IMU rate, therefore 800Hz == 1.3ms).
	\n If the value is 0, the data has not been taken during a frame acquisition.
	 */
	public native int image_sync_trigger(); public native SL_SensorsData image_sync_trigger(int setter);
}
