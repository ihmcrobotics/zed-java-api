// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_CustomMaskObjectData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_CustomMaskObjectData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_CustomMaskObjectData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_CustomMaskObjectData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_CustomMaskObjectData position(long position) {
        return (SL_CustomMaskObjectData)super.position(position);
    }
    @Override public SL_CustomMaskObjectData getPointer(long i) {
        return new SL_CustomMaskObjectData((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Unique id to help identify and track AI detections.
	<p>
	It can be either generated externally, or by using \ref sl_generate_unique_id() or left empty.
	*/
	public native @Cast("char") byte unique_object_id(int i); public native SL_CustomMaskObjectData unique_object_id(int i, byte setter);
	@MemberGetter public native @Cast("char*") BytePointer unique_object_id();
	/**
	\brief 2D bounding box of the object represented as four 2D points starting at the top left corner and rotation clockwise.
	\note Expressed in pixels on the original image resolution, <pre>{@code [0, 0]}</pre> is the top left corner.
	<pre>{@code
	A ------ B
	| Object |
	D ------ C
	}</pre>
	*/
	public native @ByRef SL_Vector2 bounding_box_2d(int i); public native SL_CustomMaskObjectData bounding_box_2d(int i, SL_Vector2 setter);
	@MemberGetter public native SL_Vector2 bounding_box_2d();

	/**
	\brief Object label.
	<p>
	This information is passed-through and can be used to improve object tracking.
	\note It should define an object class. This means that any similar object (in classification) should share the same label number.
	*/
	public native int label(); public native SL_CustomMaskObjectData label(int setter);

	/**
	\brief Detection confidence value of the object.
	\note The value should be in <pre>{@code [0-1]}</pre>.
	\note It can be used to improve the object tracking.
	*/
	public native float probability(); public native SL_CustomMaskObjectData probability(float setter);
	/**
	\brief Provide hypothesis about the object movements (degrees of freedom or DoF) to improve the object tracking.
	- true: 2 DoF projected alongside the floor plane. Case for object standing on the ground such as person, vehicle, etc. 
	\n The projection implies that the objects cannot be superposed on multiple horizontal levels. 
	- false: 6 DoF (full 3D movements are allowed).
	<p>
	\note This parameter cannot be changed for a given object tracking id.
	\note It is advised to set it by labels to avoid issues.
	*/
	public native @Cast("bool") boolean is_grounded(); public native SL_CustomMaskObjectData is_grounded(boolean setter);

	/**
	\brief Provide hypothesis about the object staticity to improve the object tracking.
	- true: the object will be assumed to never move nor being moved.
	- false: the object will be assumed to be able to move or being moved.
		*/
	public native @Cast("bool") boolean is_static(); public native SL_CustomMaskObjectData is_static(boolean setter);

	/**
	\brief Maximum tracking time threshold (in seconds) before dropping the tracked object when unseen for this amount of time.
	By default, let the tracker decide internally based on the internal sub class of the tracked object.
	Only valid for static object.
		*/
	public native float tracking_timeout(); public native SL_CustomMaskObjectData tracking_timeout(float setter);

	/**
	\brief Maximum tracking distance threshold (in meters) before dropping the tracked object when unseen for this amount of meters.
	By default, do not discard tracked object based on distance.
	Only valid for static object.
		*/
	public native float tracking_max_dist(); public native SL_CustomMaskObjectData tracking_max_dist(float setter);
	
	/**
	\brief 2D mask of the object inside its bounding box.
	 */
	public native @Cast("unsigned char*") BytePointer box_mask(); public native SL_CustomMaskObjectData box_mask(BytePointer setter);
}
