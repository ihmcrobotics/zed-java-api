// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing a set of parameters for the region of interest
<p>
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_RegionOfInterestParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_RegionOfInterestParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_RegionOfInterestParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_RegionOfInterestParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_RegionOfInterestParameters position(long position) {
        return (SL_RegionOfInterestParameters)super.position(position);
    }
    @Override public SL_RegionOfInterestParameters getPointer(long i) {
        return new SL_RegionOfInterestParameters((Pointer)this).offsetAddress(i);
    }

	/**
	 \brief Filtering how far object in the ROI should be considered, this is useful for a vehicle for instance
	 <p>
	 Default: 2.5 meters
	 */
	public native float depth_far_threshold_meters(); public native SL_RegionOfInterestParameters depth_far_threshold_meters(float setter);

	/**
	 \brief By default consider only the lower half of the image, can be useful to filter out the sky
	 <p>
	 Default: 0.5, correspond to the lower half of the image
	 */
	public native float image_height_ratio_cutoff(); public native SL_RegionOfInterestParameters image_height_ratio_cutoff(float setter);

	/**
	\brief List of modules on which the ROI will be used.
	<p>
	Default: All modules
	 */
	public native @Cast("bool") boolean auto_apply_module(int i); public native SL_RegionOfInterestParameters auto_apply_module(int i, boolean setter);
	@MemberGetter public native @Cast("bool*") BoolPointer auto_apply_module();
}
