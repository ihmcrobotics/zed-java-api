// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Holds the options used to initialize the \ref Fusion object.
 */
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_InitFusionParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_InitFusionParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_InitFusionParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_InitFusionParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_InitFusionParameters position(long position) {
        return (SL_InitFusionParameters)super.position(position);
    }
    @Override public SL_InitFusionParameters getPointer(long i) {
        return new SL_InitFusionParameters((Pointer)this).offsetAddress(i);
    }

	/**
	 * \brief This parameter allows you to select the unit to be used for all metric values of the SDK (depth, point cloud, tracking, mesh, and others).
	 *
	 *  Default : \ref SL_UNIT "SL_UNIT_MILLIMETER"
	 */
	public native @Cast("SL_UNIT") int coordinate_units(); public native SL_InitFusionParameters coordinate_units(int setter);

	/**
	 * \brief Positional tracking, point clouds and many other features require a given \ref SL_COORDINATE_SYSTEM to be used as reference.
	 * This parameter allows you to select the \ref COORDINATE_SYSTEM used by the \ref SL_Camera to return its measures.
	 * 
	 * This defines the order and the direction of the axis of the coordinate system.
	 * \n Default : \ref SL_COORDINATE_SYSTEM "SL_COORDINATE_SYSTEM_IMAGE"
	 */
	public native @Cast("SL_COORDINATE_SYSTEM") int coordinate_system(); public native SL_InitFusionParameters coordinate_system(int setter);

	/**
	 * \brief It allows users to extract some stats of the Fusion API like drop frame of each camera, latency, etc...
	 *
	 */
	public native @Cast("bool") boolean output_performance_metrics(); public native SL_InitFusionParameters output_performance_metrics(boolean setter);

	/**
	 * \brief Enable the verbosity mode of the SDK.
	 * 
	*/
	public native @Cast("bool") boolean verbose(); public native SL_InitFusionParameters verbose(boolean setter);

	/**
	 * \brief If specified change the number of period necessary for a source to go in timeout without data. For example, if you set this to 5 then, if any source do not receive data during 5 period, these sources will go to timeout and will be ignored.
	 * \note This parameter is deprecated. Use {@code data_source_timeout} present in {@code synchronization_parameters} instead.
	 */
	public native @Cast("unsigned") int timeout_period_number(); public native SL_InitFusionParameters timeout_period_number(int setter);

	/**
	 * \brief Specifies the parameters used for data synchronization during fusion.
	 *
	 * The SynchronizationParameter struct encapsulates the synchronization parameters that control the data fusion process.
	 */
	public native @ByRef SL_SynchronizationParameter synchronization_parameters(); public native SL_InitFusionParameters synchronization_parameters(SL_SynchronizationParameter setter); 
}
