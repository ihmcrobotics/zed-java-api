// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Holds the options used to initialize the \ref Fusion object.
 */
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_InitFusionParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_InitFusionParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_InitFusionParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_InitFusionParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_InitFusionParameters position(long position) {
        return (SL_InitFusionParameters)super.position(position);
    }
    @Override public SL_InitFusionParameters getPointer(long i) {
        return new SL_InitFusionParameters((Pointer)this).offsetAddress(i);
    }

	/**
	 * \brief This parameter allows you to select the unit to be used for all metric values of the SDK (depth, point cloud, tracking, mesh, and others).
	 *
	 *  Default : \ref SL_UNIT "SL_UNIT_MILLIMETER"
	 */
	public native @Cast("SL_UNIT") int coordinate_units(); public native SL_InitFusionParameters coordinate_units(int setter);

	/**
	 * \brief Positional tracking, point clouds and many other features require a given \ref SL_COORDINATE_SYSTEM to be used as reference.
	 * This parameter allows you to select the \ref COORDINATE_SYSTEM used by the \ref SL_Camera to return its measures.
	 * 
	 * This defines the order and the direction of the axis of the coordinate system.
	 * \n Default : \ref SL_COORDINATE_SYSTEM "SL_COORDINATE_SYSTEM_IMAGE"
	 */
	public native @Cast("SL_COORDINATE_SYSTEM") int coordinate_system(); public native SL_InitFusionParameters coordinate_system(int setter);

	/**
	 * \brief It allows users to extract some stats of the Fusion API like drop frame of each camera, latency, etc...
	 *
	 */
	public native @Cast("bool") boolean output_performance_metrics(); public native SL_InitFusionParameters output_performance_metrics(boolean setter);

	/**
	 * \brief Enable the verbosity mode of the SDK.
	 * 
	*/
	public native @Cast("bool") boolean verbose(); public native SL_InitFusionParameters verbose(boolean setter);

	/**
	 * \brief If specified change the number of period necessary for a source to go in timeout without data. For example, if you set this to 5 then, if any source do not receive data during 5 period, these sources will go to timeout and will be ignored.
	 * \note This parameter is deprecated. Use {@code data_source_timeout} present in {@code synchronization_parameters} instead.
	 */
	public native @Cast("unsigned") int timeout_period_number(); public native SL_InitFusionParameters timeout_period_number(int setter);

	/**
	\brief NVIDIA graphics card id to use.
	
	By default the SDK will use the most powerful NVIDIA graphics card found.
	\n However, when running several applications, or using several cameras at the same time, splitting the load over available GPUs can be useful.
	\n This parameter allows you to select the GPU used by the sl::Camera using an ID from 0 to n-1 GPUs in your PC.
	\n Default: -1
	\note A non-positive value will search for all CUDA capable devices and select the most powerful.
	 */
	public native int sdk_gpu_id(); public native SL_InitFusionParameters sdk_gpu_id(int setter);
	/**
	\brief CUcontext to be used.
	<p>
	If your application uses another CUDA-capable library, giving its CUDA context to the ZED SDK can be useful when sharing GPU memories.
	\n This parameter allows you to set the CUDA context to be used by the ZED SDK.
	\n Leaving this parameter empty asks the SDK to create its own context.
	\n Default: (empty)
	<p>
	\note When creating you own CUDA context, you have to define the device you will use. Do not forget to also specify it on \ref sdk_gpu_id.
	\note <b>On Jetson</b>, you have to set the flag CU_CTX_SCHED_YIELD, during CUDA context creation.
	\note You can also let the SDK create its own context, and use sl::Camera::getCUDAContext() to use it.
	 */
	public native CUctx_st sdk_cuda_ctx(); public native SL_InitFusionParameters sdk_cuda_ctx(CUctx_st setter);
	/**
	 * \brief Specifies the parameters used for data synchronization during fusion.
	 *
	 * The SynchronizationParameter struct encapsulates the synchronization parameters that control the data fusion process.
	 */
	public native @ByRef SL_SynchronizationParameter synchronization_parameters(); public native SL_InitFusionParameters synchronization_parameters(SL_SynchronizationParameter setter); 

	/**
	* \brief Sets the maximum resolution for all Fusion outputs, such as images and measures.
	*
	* The default value is (-1, -1), which allows the Fusion to automatically select the optimal resolution for the best quality/runtime ratio.
	*
	* - For images, the output resolution can be up to the native resolution of the camera.
	* - For measures involving depth, the output resolution can be up to the maximum working resolution.
	*
	* Setting this parameter to (-1, -1) will ensure the best balance between quality and performance for depth measures.
	*/
	public native @ByRef SL_Resolution maximum_working_resolution(); public native SL_InitFusionParameters maximum_working_resolution(SL_Resolution setter);
}
