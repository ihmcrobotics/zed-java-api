// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
* \brief Structure containing data from the IMU sensor.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_IMUData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_IMUData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_IMUData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_IMUData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_IMUData position(long position) {
        return (SL_IMUData)super.position(position);
    }
    @Override public SL_IMUData getPointer(long i) {
        return new SL_IMUData((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Whether the IMU sensor is available in your camera.
	*/
	public native @Cast("bool") boolean is_available(); public native SL_IMUData is_available(boolean setter);
	/**
	\brief Data acquisition timestamp in nanoseconds.
	*/
	public native @Cast("unsigned long long") long timestamp_ns(); public native SL_IMUData timestamp_ns(long setter);
	/**
	\brief Gets the angular velocity vector of the gyroscope in deg/s.
	<p>
	The value is corrected from bias, scale and misalignment.
	\note The value can be directly ingested in an IMU fusion algorithm to extract a quaternion.
	\note Not available in SVO or STREAM mode.
	*/
	public native @ByRef SL_Vector3 angular_velocity(); public native SL_IMUData angular_velocity(SL_Vector3 setter);
	/**
	\brief Linear acceleration vector (3x1) of the gyroscope in m/s².
	
	The value is corrected from bias, scale and misalignment.
	\note The value can be directly ingested in an IMU fusion algorithm to extract a quaternion.
	\note Not available in SVO or STREAM mode.
	*/
	public native @ByRef SL_Vector3 linear_acceleration(); public native SL_IMUData linear_acceleration(SL_Vector3 setter);
	/**
	\brief Angular velocity vector of the gyroscope in deg/s (uncorrected from the IMU calibration).
	\note The value is the exact raw values from the IMU.
	\note Not available in SVO or STREAM mode.
	*/
	public native @ByRef SL_Vector3 angular_velocity_unc(); public native SL_IMUData angular_velocity_unc(SL_Vector3 setter); //uncalibrated
	/**
	\brief Linear acceleration vector of the gyroscope in m/s² (uncorrected from the IMU calibration).
	\note The value is the exact raw values from the IMU.
	\note Not available in SVO or STREAM mode.
	*/
	public native @ByRef SL_Vector3 linear_acceleration_unc(); public native SL_IMUData linear_acceleration_unc(SL_Vector3 setter); //uncalibrated
	/**
	\brief Orientation from the IMU sensor.
	*/
	public native @ByRef SL_Quaternion orientation(); public native SL_IMUData orientation(SL_Quaternion setter);
	/**
	\brief Covariance matrix of the orientation from the IMU sensor (\ref orientation).
	*/
	public native @ByRef SL_Matrix3f orientation_covariance(); public native SL_IMUData orientation_covariance(SL_Matrix3f setter);
	/**
	\brief Covariance matrix of the angular velocity of the gyroscope in deg/s (\ref angular_velocity).
	\note Not available in SVO or STREAM mode.
	*/
	public native @ByRef SL_Matrix3f angular_velocity_convariance(); public native SL_IMUData angular_velocity_convariance(SL_Matrix3f setter);
	/**
	\brief Covariance matrix of the linear acceleration of the gyroscope in m/s² (\ref linear_acceleration).
	\note Not available in SVO or STREAM mode.
	*/
	public native @ByRef SL_Matrix3f linear_acceleration_convariance(); public native SL_IMUData linear_acceleration_convariance(SL_Matrix3f setter);
}
