// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;



/**
\brief Structure containing a set of runtime parameters for the object detection module.
<p>
The default constructor sets all parameters to their default settings.
\note Parameters can be adjusted by the user.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_ObjectDetectionRuntimeParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_ObjectDetectionRuntimeParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_ObjectDetectionRuntimeParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_ObjectDetectionRuntimeParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_ObjectDetectionRuntimeParameters position(long position) {
        return (SL_ObjectDetectionRuntimeParameters)super.position(position);
    }
    @Override public SL_ObjectDetectionRuntimeParameters getPointer(long i) {
        return new SL_ObjectDetectionRuntimeParameters((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Confidence threshold.
	<p>
	From 1 to 100, with 1 meaning a low threshold, more uncertain objects and 99 very few but very precise objects.
	\n Default: 20.f
	\note If the scene contains a lot of objects, increasing the confidence can slightly speed up the process, since every object instance is tracked.
	\note \ref detection_confidence_threshold is used as a fallback when SL_ObjectDetectionRuntimeParameters.object_confidence_threshold is partially set
	 */
	public native float detection_confidence_threshold(); public native SL_ObjectDetectionRuntimeParameters detection_confidence_threshold(float setter);
	/**
	\brief Defines which object types to detect and track.
	<p>
	\note Fewer object types can slightly speed up the process since every object is tracked.
	\note Will output only the selected classes.
	 */
	public native int object_class_filter(int i); public native SL_ObjectDetectionRuntimeParameters object_class_filter(int i, int setter);
	@MemberGetter public native IntPointer object_class_filter();
	/**
	\brief Array of confidence thresholds for each class (can be empty for some classes).
    \note SL_ObjectDetectionRuntimeParameters.detection_confidence_threshold will be taken as fallback/default value.
	 */
	public native int object_confidence_threshold(int i); public native SL_ObjectDetectionRuntimeParameters object_confidence_threshold(int i, int setter);
	@MemberGetter public native IntPointer object_confidence_threshold();
}
