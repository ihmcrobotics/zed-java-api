// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing a set of parameters for the spatial mapping module.
<p>
The default constructor sets all parameters to their default settings.
\note Parameters can be adjusted by the user.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_SpatialMappingParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_SpatialMappingParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_SpatialMappingParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_SpatialMappingParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_SpatialMappingParameters position(long position) {
        return (SL_SpatialMappingParameters)super.position(position);
    }
    @Override public SL_SpatialMappingParameters getPointer(long i) {
        return new SL_SpatialMappingParameters((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Spatial mapping resolution in meters.
	<p>
	Default: 0.05f
	 */
	public native float resolution_meter(); public native SL_SpatialMappingParameters resolution_meter(float setter);
	/**
	\brief Depth range in meters.
	<p>
	Can be different from the value set by SL_InitParameters.depth_maximum_distance.
	\note Set to 0 by default. In this case, the range is computed from \ref resolution_meter
	and from the current internal parameters to fit your application.
	 */
	public native float range_meter(); public native SL_SpatialMappingParameters range_meter(float setter);
	/**
	\brief Whether to save the texture.
	<p>
	If set to true, you will be able to apply the texture to your mesh after it is created.
	\n Default: false
	\note This option will consume more memory.
	\note This option is only available for \ref SL_SPATIAL_MAP_TYPE_MESH.
	 */
	public native @Cast("bool") boolean save_texture(); public native SL_SpatialMappingParameters save_texture(boolean setter);
	/**
	\brief Whether to only use chunks.
	<p>
	If set to false, you will ensure consistency between the mesh and its inner chunk data.
	\n Default: false
	\note Updating the mesh is time-consuming.
	\note Setting this to true results in better performance.
	 */
	public native @Cast("bool") boolean use_chunk_only(); public native SL_SpatialMappingParameters use_chunk_only(boolean setter);
	/**
	\brief The maximum CPU memory (in MB) allocated for the meshing process.
	<p>
	Default: 2048
	 */
	public native int max_memory_usage(); public native SL_SpatialMappingParameters max_memory_usage(int setter);
	/**
	\brief Whether to inverse the order of the vertices of the triangles.
	<p>
	If your display process does not handle front and back face culling, you can use this to correct it.
	\n Default: false
	\note This option is only available for \ref SL_SPATIAL_MAP_TYPE_MESH.
	 */
	public native @Cast("bool") boolean reverse_vertex_order(); public native SL_SpatialMappingParameters reverse_vertex_order(boolean setter);
	/**
	\brief The type of spatial map to be created.
	<p>
	This dictates the format that will be used for the mapping (e.g. mesh, point cloud).
	\n See \ref SL_SPATIAL_MAP_TYPE.
	 */
	public native @Cast("SL_SPATIAL_MAP_TYPE") int map_type(); public native SL_SpatialMappingParameters map_type(int setter);
	/**
	\brief Control the integration rate of the current depth into the mapping process.
	<p>
	This parameter controls how many times a stable 3D points should be seen before it is integrated into the spatial mapping.
	\n Default: 0 (this will define the stability counter based on the mesh resolution, the higher the resolution, the higher the stability counter)
	*/
	public native int stability_counter(); public native SL_SpatialMappingParameters stability_counter(int setter);
}
