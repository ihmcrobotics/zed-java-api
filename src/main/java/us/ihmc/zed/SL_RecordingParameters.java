// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing the options used to record.
 */
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_RecordingParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_RecordingParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_RecordingParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_RecordingParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_RecordingParameters position(long position) {
        return (SL_RecordingParameters)super.position(position);
    }
    @Override public SL_RecordingParameters getPointer(long i) {
        return new SL_RecordingParameters((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Filename of the file to save the recording into.
	 */
	public native @Cast("unsigned char") byte video_filename(int i); public native SL_RecordingParameters video_filename(int i, byte setter);
	@MemberGetter public native @Cast("unsigned char*") BytePointer video_filename();

	/**
	\brief Compression mode the recording.
	
	Default: \ref SL_SVO_COMPRESSION_MODE_H264
	 */
	public native @Cast("SL_SVO_COMPRESSION_MODE") int compression_mode(); public native SL_RecordingParameters compression_mode(int setter);

	/**
	\brief Overrides the default bitrate of the SVO file, in kbits/s.
	<p>
	Default: 0 (the default values associated with the resolution)
	\note Only works if \ref compression_mode is H264 or H265.
	\note Available range: 0 or [1000 - 60000]
	 */
	public native @Cast("unsigned int") int bitrate(); public native SL_RecordingParameters bitrate(int setter);

	/**
	\brief Framerate for the recording file.
	<p>
	Default: 0 (camera framerate will be taken)
	\warning This framerate must be below or equal to the camera framerate and camera framerate must be a multiple of the target framerate.
	\warning It means that it must respect <code camera_framerate%target_framerate == 0</code>.
	\warning Allowed framerates are 15,30, 60 or 100 if possible.
	\warning Any other values will be discarded and camera FPS will be taken.
	 */
	public native @Cast("unsigned int") int target_framerate(); public native SL_RecordingParameters target_framerate(int setter);

	/**
	\brief  Defines whether to decode and re-encode a streaming source.
	<p>
	Default: false
	\note If set to false, it will avoid decoding/re-encoding and convert directly streaming input into a SVO file.
	\note This saves a encoding session and can be especially useful on NVIDIA Geforce cards where the number of encoding session is limited.
	\note \ref compression_mode, \ref target_framerate and \ref bitrate will be ignored in this mode.
	 */
	public native @Cast("bool") boolean transcode_streaming_input(); public native SL_RecordingParameters transcode_streaming_input(boolean setter);
}
