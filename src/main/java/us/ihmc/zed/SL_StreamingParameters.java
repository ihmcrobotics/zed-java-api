// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
\brief Structure containing the options used to stream with the ZED SDK.
\note Parameters can be adjusted by the user.
 */
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_StreamingParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_StreamingParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_StreamingParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_StreamingParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_StreamingParameters position(long position) {
        return (SL_StreamingParameters)super.position(position);
    }
    @Override public SL_StreamingParameters getPointer(long i) {
        return new SL_StreamingParameters((Pointer)this).offsetAddress(i);
    }


	/**
	\brief Encoding used for streaming.
		*/
	public native @Cast("SL_STREAMING_CODEC") int codec(); public native SL_StreamingParameters codec(int setter);

	/**
	\brief Port used for streaming.
	\warning Port must be an even number. Any odd number will be rejected.
	\warning Port must be opened.
	 */
	public native @Cast("unsigned short") short port(); public native SL_StreamingParameters port(short setter);

	/**
	\brief Defines the streaming bitrate in Kbits/s
	
	| \ref SL_STREAMING_CODEC	   | \ref SL_RESOLUTION 	   | FPS   | bitrate (kbps) |
	|------------------------------|---------------------------|-------|----------------|
	| \ref SL_STREAMING_CODEC_H264 | \ref SL_RESOLUTION_HD2K   |   15  |     8500       |
	| \ref SL_STREAMING_CODEC_H264 | \ref SL_RESOLUTION_HD1080 |   30  |    12500       |
	| \ref SL_STREAMING_CODEC_H264 | \ref SL_RESOLUTION_HD720  |   60  |     7000       |
	| \ref SL_STREAMING_CODEC_H265 | \ref SL_RESOLUTION_HD2K   |   15  |     7000       |
	| \ref SL_STREAMING_CODEC_H265 | \ref SL_RESOLUTION_HD1080 |   30  |    11000       |
	| \ref SL_STREAMING_CODEC_H265 | \ref SL_RESOLUTION_HD720  |   60  |     6000       |
	Default: 0 (it will be set to the best value depending on your resolution/FPS)
	\note Available range: [1000 - 60000]
	 */
	public native @Cast("unsigned int") int bitrate(); public native SL_StreamingParameters bitrate(int setter);

	/**
	\brief GOP size in number of frames.
    <p>
    Default: -1 (the GOP size will last at maximum 2 seconds, depending on camera FPS)
    \note The GOP size determines the maximum distance between IDR/I-frames. Very high GOP size will result in slightly more efficient compression, especially on static scenes. But latency will increase.
    \note Maximum value: 256
	 */
	public native int gop_size(); public native SL_StreamingParameters gop_size(int setter);

	/**
	\brief Defines whether the adaptive bitrate is enable.
    <p>
    Default: false
    \note Bitrate will be adjusted depending the number of packet dropped during streaming.
    \note If activated, the bitrate can vary between [bitrate/4, bitrate].
    \warning Currently, the adaptive bitrate only works when "sending" device is a NVIDIA Jetson (X1, X2, Xavier, Nano).
	 */
	public native @Cast("bool") boolean adaptative_bitrate(); public native SL_StreamingParameters adaptative_bitrate(boolean setter);

	/**
	\brief Size of a single chunk.
	<p>
	Default: 16084
	\note Stream buffers are divided into X number of chunks where each chunk is  \ref chunk_size bytes long.
	\note You can lower \ref chunk_size value if network generates a lot of packet lost: this will
	generates more chunk for a single image, but each chunk sent will be lighter to avoid inside-chunk corruption.
	\note Increasing this value can decrease latency.
	<p>
	\n \note Available range: [1024 - 65000]
	 */
	public native @Cast("unsigned short") short chunk_size(); public native SL_StreamingParameters chunk_size(short setter);


	/**
	\brief Framerate for the streaming output.
	<p>
	Default: 0 (camera framerate will be taken)
	\warning This framerate must be below or equal to the camera framerate.
	\warning Allowed framerates are 15, 30, 60 or 100 if possible.
	\warning Any other values will be discarded and camera FPS will be taken.
	 */
	public native @Cast("unsigned int") int target_framerate(); public native SL_StreamingParameters target_framerate(int setter);
}
