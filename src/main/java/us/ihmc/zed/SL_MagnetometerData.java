// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.zed;

import org.bytedeco.cuda.cudart.CUctx_st;
import org.bytedeco.cuda.cudart.CUstream_st;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.zed.global.zed.*;


/**
* \brief Structure containing data from the magnetometer sensor.
*/
@Properties(inherit = us.ihmc.zed.ZEDJavaAPIConfig.class)
public class SL_MagnetometerData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SL_MagnetometerData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SL_MagnetometerData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SL_MagnetometerData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SL_MagnetometerData position(long position) {
        return (SL_MagnetometerData)super.position(position);
    }
    @Override public SL_MagnetometerData getPointer(long i) {
        return new SL_MagnetometerData((Pointer)this).offsetAddress(i);
    }

	/**
	\brief Whether the magnetometer sensor is available in your camera.
	*/
	public native @Cast("bool") boolean is_available(); public native SL_MagnetometerData is_available(boolean setter);
	/**
	\brief Data acquisition timestamp in nanoseconds.
	*/
	public native @Cast("unsigned long long") long timestamp_ns(); public native SL_MagnetometerData timestamp_ns(long setter);
	/**
	\brief Magnetic field local vector in microtesla (μT).
	\note To calibrate the magnetometer sensor, please use \b ZED \b Sensor \b Viewer tool after placing the camera in the final operating environment.
	*/
	public native @ByRef SL_Vector3 magnetic_field_c(); public native SL_MagnetometerData magnetic_field_c(SL_Vector3 setter); //calibrated
	/**
	\brief Uncalibrated magnetic field local vector in microtesla (μT).
	\note The magnetometer raw values are affected by soft and hard iron interferences.
	\note The sensor must be calibrated by placing the camera in the working environment and using \b ZED \b Sensor \b Viewer tool.
	\note Not available in SVO or STREAM mode.
	*/
	public native @ByRef SL_Vector3 magnetic_field_unc(); public native SL_MagnetometerData magnetic_field_unc(SL_Vector3 setter); //uncalibrated
	/**
	\brief Camera heading in degrees relative to the magnetic North Pole.
	\note The magnetic North Pole has an offset with respect to the geographic North Pole, depending on the geographic position of the camera.
	\note To get a correct magnetic heading, the magnetometer sensor must be calibrated using \b ZED \b Sensor \b Viewer tool.
	*/
	public native float magnetic_heading(); public native SL_MagnetometerData magnetic_heading(float setter);
	/**
	\brief State of \ref magnetic_heading.
	*/
	public native @Cast("SL_HEADING_STATE") int magnetic_heading_state(); public native SL_MagnetometerData magnetic_heading_state(int setter);
	/**
	\brief Accuracy of \ref magnetic_heading measure in the range [0.0, 1.0].
	\note A negative value means that the magnetometer must be calibrated using \b ZED \b Sensor \b Viewer tool.
	*/
	public native float magnetic_heading_accuracy(); public native SL_MagnetometerData magnetic_heading_accuracy(float setter);
	/**
	\brief Realtime data acquisition rate in hertz (Hz).
	*/
	public native float effective_rate(); public native SL_MagnetometerData effective_rate(float setter);
}
